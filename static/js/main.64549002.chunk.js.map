{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","onSearchBoxChange","event","value","target","setState","searchFeild","state","fetch","response","json","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+UAEaA,G,kBAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,aCNTC,EAAW,SAACR,GACvB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAMA,QAASA,GAAcA,EAAQC,UCLhCM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCoCHG,E,kDArCb,aAAe,IAAD,8BACZ,gBAYFC,kBAAqB,SAACC,GAAW,IACvBC,EAAUD,EAAME,OAAhBD,MAER,EAAKE,SAAS,CAACC,YAAaH,KAd5B,EAAKI,MAAQ,CACXd,SAAU,GACVa,YAAa,IAJH,E,gMAQSE,MAAM,8C,cAAvBC,E,gBACaA,EAASC,O,OAA1BD,E,OAEAE,KAAKN,SAAS,CAAEZ,SAAUgB,I,qIAOlB,IAAD,EAC2BE,KAAKJ,MAA/Bd,EADD,EACCA,SAAUa,EADX,EACWA,YACZM,EAAmBnB,EAASoB,QAAQ,SAAAzB,GACxC,OAAOA,EAAQE,KAAKwB,cAAcC,SAAST,EAAYU,wBAEzD,OACE,sBAAK/B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEa,KAAK,SACLF,YAAY,kBACZC,aAAcc,KAAKV,oBAErB,cAAC,EAAD,CAAUR,SAAUmB,W,GAhCVK,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.64549002.chunk.js","sourcesContent":["import './card.style.css';\n\nexport const Card = (props) => (\n  <div className=\"card-container\">\n    <img\n      alt='monster'\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n    />\n    <h2>{props.monster.name}</h2>\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import \"./card-list.styles.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = (props) => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map((monster) => (\n        <Card monster={monster} key={monster.id} />\n      ))}\n    </div>\n  );\n};","import './search-box.style.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search'\n        placeholder={placeholder}\n        onChange={handleChange}\n    />\n)","import { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchFeild: '',\n    };\n  }\n  async componentDidMount() {\n    let response = await fetch('https://jsonplaceholder.typicode.com/users');\n    response = await response.json();\n    // console.log(response);\n    this.setState({ monsters: response });\n  }\n  onSearchBoxChange =  (event) => {\n    const { value } = event.target;\n    // console.log(this.state);\n    this.setState({searchFeild: value}); \n  }\n  render() {\n    const { monsters, searchFeild } = this.state;\n    const filteredMonsters = monsters.filter( monster => {\n      return monster.name.toLowerCase().includes(searchFeild.toLocaleLowerCase());\n    })\n    return (\n      <div className=\"App\">\n        <h1>Monster Rolodex</h1>\n        <SearchBox \n          type='search'\n          placeholder='Search monsters'\n          handleChange={this.onSearchBoxChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}